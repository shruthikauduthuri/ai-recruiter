{"ast":null,"code":"import _asyncToGenerator from \"D:/ai-recruiter/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst _c0 = [\"videoElement\"];\nfunction InterviewComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"p\");\n    i0.ɵɵtext(2, \"Take your time to prepare your answer\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function InterviewComponent_div_14_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.skipPreparation());\n    });\n    i0.ɵɵtext(4, \"Start Answering\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction InterviewComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵelement(1, \"span\", 22);\n    i0.ɵɵtext(2, \" Recording \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InterviewComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵelement(1, \"i\", 24);\n    i0.ɵɵtext(2, \" Camera disconnected! Interview will be terminated. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let InterviewComponent = /*#__PURE__*/(() => {\n  class InterviewComponent {\n    constructor(router) {\n      this.router = router;\n      this.questions = ['Tell us about yourself', 'What are your greatest strengths?', 'Where do you see yourself in 5 years?', 'Why should we hire you?', 'What is your biggest achievement?', 'How do you handle stress?', 'What are your salary expectations?', 'Why do you want to work here?'];\n      this.currentQuestionIndex = 0;\n      this.selectedQuestions = [];\n      this.timeRemaining = 30; // Prep time\n      this.answerTimeRemaining = 60; // Answer time\n      this.isPreparationTime = true;\n      this.mediaStream = null;\n      this.mediaRecorder = null;\n      this.recordedChunks = [];\n      this.isRecording = false;\n      this.recordings = [];\n      this.speechSynthesis = window.speechSynthesis;\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.selectRandomQuestions();\n        _this.startPrepTimer();\n        yield _this.setupCamera();\n        _this.readQuestion();\n        _this.startCameraMonitoring();\n      })();\n    }\n    startCameraMonitoring() {\n      this.cameraCheckInterval = setInterval(() => {\n        this.checkCameraActive();\n      }, 1000); // Check every second\n    }\n    checkCameraActive() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const videoTrack = _this2.mediaStream?.getVideoTracks()[0];\n        if (!videoTrack || !videoTrack.enabled || videoTrack.readyState !== 'live') {\n          _this2.handleCameraDisruption();\n        }\n        // Also check if video element is receiving frames\n        const video = _this2.videoElement.nativeElement;\n        if (video.videoWidth === 0 || video.videoHeight === 0) {\n          _this2.handleCameraDisruption();\n        }\n      })();\n    }\n    handleCameraDisruption() {\n      clearInterval(this.cameraCheckInterval);\n      clearInterval(this.timerInterval);\n      if (this.isRecording) {\n        this.stopRecording();\n      }\n      if (this.mediaStream) {\n        this.mediaStream.getTracks().forEach(track => track.stop());\n      }\n      alert('Camera access was lost. The interview has been terminated.');\n      this.router.navigate(['/interview-setup']);\n    }\n    setupCamera() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this3.mediaStream = yield navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n          });\n          _this3.videoElement.nativeElement.srcObject = _this3.mediaStream;\n          // Setup MediaRecorder\n          _this3.mediaRecorder = new MediaRecorder(_this3.mediaStream, {\n            mimeType: 'video/webm;codecs=vp9,opus'\n          });\n          _this3.mediaRecorder.ondataavailable = event => {\n            if (event.data.size > 0) {\n              _this3.recordedChunks.push(event.data);\n            }\n          };\n          _this3.mediaRecorder.onstop = () => {\n            const blob = new Blob(_this3.recordedChunks, {\n              type: 'video/webm'\n            });\n            _this3.recordings.push({\n              question: _this3.selectedQuestions[_this3.currentQuestionIndex],\n              blob: blob\n            });\n            _this3.recordedChunks = [];\n          };\n          // Add event listener for track ended\n          _this3.mediaStream.getVideoTracks()[0].onended = () => {\n            _this3.handleCameraDisruption();\n          };\n        } catch (err) {\n          console.error('Failed to setup camera:', err);\n          _this3.router.navigate(['/interview-setup']);\n        }\n      })();\n    }\n    selectRandomQuestions() {\n      this.selectedQuestions = this.questions.sort(() => 0.5 - Math.random()).slice(0, 5);\n    }\n    readQuestion() {\n      // Cancel any ongoing speech\n      this.speechSynthesis.cancel();\n      // Create new speech utterance\n      const utterance = new SpeechSynthesisUtterance(this.selectedQuestions[this.currentQuestionIndex]);\n      // Configure speech settings\n      utterance.rate = 0.9; // Slightly slower speed\n      utterance.pitch = 1; // Normal pitch\n      utterance.volume = 1; // Full volume\n      utterance.lang = 'en-US'; // English language\n      // Speak the question\n      this.speechSynthesis.speak(utterance);\n    }\n    startPrepTimer() {\n      this.timeRemaining = 15;\n      this.isPreparationTime = true;\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining--;\n        if (this.timeRemaining <= 0) {\n          clearInterval(this.timerInterval);\n          this.startAnswerTimer();\n        }\n      }, 1000);\n    }\n    startAnswerTimer() {\n      this.timeRemaining = 60;\n      this.isPreparationTime = false;\n      this.timerInterval = setInterval(() => {\n        this.timeRemaining--;\n        if (this.timeRemaining <= 0) {\n          this.nextQuestion();\n        }\n      }, 1000);\n    }\n    nextQuestion() {\n      clearInterval(this.timerInterval);\n      if (this.currentQuestionIndex < 4) {\n        this.currentQuestionIndex++;\n        this.startPrepTimer();\n        this.readQuestion(); // Read the new question\n      } else {\n        if (this.mediaStream) {\n          this.mediaStream.getTracks().forEach(track => track.stop());\n        }\n        this.router.navigate(['/interview-complete']);\n      }\n    }\n    skipPreparation() {\n      clearInterval(this.timerInterval);\n      this.startAnswerTimer();\n    }\n    ngOnDestroy() {\n      clearInterval(this.timerInterval);\n      clearInterval(this.cameraCheckInterval);\n      if (this.mediaStream) {\n        this.mediaStream.getTracks().forEach(track => track.stop());\n      }\n      if (this.isRecording) {\n        this.stopRecording();\n      }\n      this.speechSynthesis.cancel();\n    }\n    // Add a method to replay the question\n    replayQuestion() {\n      this.readQuestion();\n    }\n    getProgressPercentage() {\n      const totalTime = this.isPreparationTime ? 15 : 60;\n      const percentage = this.timeRemaining / totalTime * 100;\n      return percentage;\n    }\n    static {\n      this.ɵfac = function InterviewComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || InterviewComponent)(i0.ɵɵdirectiveInject(i1.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: InterviewComponent,\n        selectors: [[\"app-interview\"]],\n        viewQuery: function InterviewComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.videoElement = _t.first);\n          }\n        },\n        decls: 23,\n        vars: 14,\n        consts: [[\"videoElement\", \"\"], [1, \"interview-container\"], [1, \"question-header\"], [1, \"question-number\"], [1, \"timer-container\"], [1, \"timer\"], [1, \"progress-bar\"], [1, \"progress\"], [1, \"question-container\"], [1, \"question\"], [\"title\", \"Replay question\", 1, \"replay-button\", 3, \"click\"], [1, \"fas\", \"fa-volume-up\"], [\"class\", \"preparation-notice\", 4, \"ngIf\"], [1, \"video-container\"], [\"autoplay\", \"\", \"muted\", \"\"], [\"class\", \"recording-indicator\", 4, \"ngIf\"], [\"class\", \"camera-warning\", 4, \"ngIf\"], [1, \"button-container\"], [1, \"next-button\", 3, \"click\", \"disabled\"], [1, \"preparation-notice\"], [1, \"skip-prep\", 3, \"click\"], [1, \"recording-indicator\"], [1, \"dot\"], [1, \"camera-warning\"], [1, \"fas\", \"fa-exclamation-triangle\"]],\n        template: function InterviewComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3);\n            i0.ɵɵtext(3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 4)(5, \"div\", 5);\n            i0.ɵɵtext(6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"div\", 6);\n            i0.ɵɵelement(8, \"div\", 7);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(9, \"div\", 8)(10, \"div\", 9);\n            i0.ɵɵtext(11);\n            i0.ɵɵelementStart(12, \"button\", 10);\n            i0.ɵɵlistener(\"click\", function InterviewComponent_Template_button_click_12_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.replayQuestion());\n            });\n            i0.ɵɵelement(13, \"i\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(14, InterviewComponent_div_14_Template, 5, 0, \"div\", 12);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"div\", 13);\n            i0.ɵɵelement(16, \"video\", 14, 0);\n            i0.ɵɵtemplate(18, InterviewComponent_div_18_Template, 3, 0, \"div\", 15)(19, InterviewComponent_div_19_Template, 3, 0, \"div\", 16);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"div\", 17)(21, \"button\", 18);\n            i0.ɵɵlistener(\"click\", function InterviewComponent_Template_button_click_21_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.nextQuestion());\n            });\n            i0.ɵɵtext(22, \" Next Question \");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate1(\"Question \", ctx.currentQuestionIndex + 1, \" of 5\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵclassProp(\"prep-timer\", ctx.isPreparationTime);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate2(\" \", ctx.isPreparationTime ? \"Preparation Time: \" : \"Answer Time: \", \" \", ctx.timeRemaining, \"s \");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleProp(\"width\", ctx.getProgressPercentage(), \"%\");\n            i0.ɵɵclassProp(\"prep-progress\", ctx.isPreparationTime);\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate1(\" \", ctx.selectedQuestions[ctx.currentQuestionIndex], \" \");\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.isPreparationTime);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.isRecording);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.isCameraActive);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.isPreparationTime);\n          }\n        },\n        styles: [\".interview-container[_ngcontent-%COMP%]{max-width:1000px;margin:2rem auto;padding:1.5rem;display:flex;flex-direction:column;align-items:center}.question-header[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;gap:1rem;margin-bottom:2rem;width:100%;text-align:center}.question-number[_ngcontent-%COMP%]{font-size:1.2rem;color:#374151;font-weight:500}.timer-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;gap:.5rem;width:100%;max-width:300px}.timer[_ngcontent-%COMP%]{background-color:#dc3545;color:#fff;padding:.5rem 1rem;border-radius:6px;font-weight:500;font-size:1rem}.timer.prep-timer[_ngcontent-%COMP%]{background-color:#2563eb}.progress-bar[_ngcontent-%COMP%]{width:100%;height:4px;background-color:#e5e7eb;border-radius:2px;overflow:hidden}.progress[_ngcontent-%COMP%]{height:100%;background-color:#dc3545;transition:width 1s linear}.progress.prep-progress[_ngcontent-%COMP%]{background-color:#2563eb}.question-container[_ngcontent-%COMP%]{margin-bottom:2rem;text-align:center;width:100%;max-width:800px}.question[_ngcontent-%COMP%]{font-size:1.8rem;font-weight:500;color:#111827;margin-bottom:1.5rem;line-height:1.4;display:flex;align-items:center;justify-content:center;gap:1rem}.replay-button[_ngcontent-%COMP%]{background:none;border:none;color:#2563eb;cursor:pointer;padding:.5rem;min-width:auto;transition:transform .2s}.replay-button[_ngcontent-%COMP%]:hover{transform:scale(1.1);color:#1d4ed8}.replay-button[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:1.2rem}.preparation-notice[_ngcontent-%COMP%]{background-color:#eff6ff;border:1px solid #dbeafe;border-radius:8px;padding:1.5rem;margin:1.5rem auto;text-align:center;max-width:600px}.preparation-notice[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#2563eb;margin-bottom:1rem;font-size:1.1rem}.video-container[_ngcontent-%COMP%]{width:100%;max-width:800px;margin:0 auto 2rem;border-radius:12px;overflow:hidden;box-shadow:0 4px 6px -1px #0000001a;background-color:#f3f4f6;aspect-ratio:16/9}.video-container[_ngcontent-%COMP%]   video[_ngcontent-%COMP%]{width:100%;height:100%;object-fit:cover;background-color:#000}.button-container[_ngcontent-%COMP%]{display:flex;gap:1rem;justify-content:center;margin-top:2rem;width:100%}button[_ngcontent-%COMP%]{padding:.75rem 1.5rem;border:none;border-radius:6px;cursor:pointer;font-weight:500;font-size:1rem;transition:all .2s ease;min-width:150px}.skip-prep[_ngcontent-%COMP%]{background-color:#2563eb;color:#fff}.skip-prep[_ngcontent-%COMP%]:hover{background-color:#1d4ed8;transform:translateY(-1px)}.next-button[_ngcontent-%COMP%]{background-color:#059669;color:#fff}.next-button[_ngcontent-%COMP%]:hover{background-color:#047857;transform:translateY(-1px)}.next-button[_ngcontent-%COMP%]:disabled{background-color:#9ca3af;cursor:not-allowed;transform:none}@media (max-width: 768px){.interview-container[_ngcontent-%COMP%]{margin:1rem;padding:1rem}.question-container[_ngcontent-%COMP%]   .question[_ngcontent-%COMP%]{font-size:1.4rem}.video-container[_ngcontent-%COMP%]{margin:1rem auto}.button-container[_ngcontent-%COMP%]{flex-direction:column;align-items:center}button[_ngcontent-%COMP%]{width:100%;max-width:300px}.timer-container[_ngcontent-%COMP%]{max-width:250px}}\"]\n      });\n    }\n  }\n  return InterviewComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}